<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类管理，理解sql隔离
注意:使用mapper代理方法的代理，namespace有特殊的作用
-->
<mapper namespace="com.lgh.mapper.UserMapper">
<resultMap  id="users" type="pojo.Users">
        <id column="user_id" property="user_id"/>
        <result  column="ename" property="user_name" />
        <result column="user_year" property="user_year" />
    </resultMap>
<select id="findUserById" parameterType="String" resultType = "pojo.Users">
select * from Users where user_id = #{value}
</select>
<select id="findAll" resultMap="users">
select * from Users
</select>
 <!--执行增加操作的SQL语句。id和parameterType分别与IUserOperation接口中的addUser方法的名字和参数类型一致。
 useGeneratedKeys设置为"true"表明要MyBatis获取由数据库自动生成的主键；keyProperty="user_id"指定把获取到的主键值注入到User的_user_id属性--> 
<insert id="insertUser" parameterType="pojo.Users" useGeneratedKeys="true" keyProperty="user_id">
insert into Users(user_id,user_name,user_years)
values (#{user_id},#{user_name},#{user_years})
</insert>

<update id="updateUser" parameterType="pojo.Users">
update Users set user_name=#{user_name},user_years=#{user_years} where user_id=#{user_id}
</update>

 <delete id="deleteUser" parameterType="String">
    delete from Users where user_id=#{user_id}
</delete>
</mapper>